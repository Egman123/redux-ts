<!-- import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addCustomerAction, removeCustomerAction } from './store/customerReducer';

const App = () => {
  
  const cash = useSelector(state => state.cash.cash);
  const customers = useSelector(state => state.customers.customers)
  const dispatch = useDispatch();

  const addCash = (cash) => {
    dispatch({type: 'ADD_CASH', payload: cash})
  }

  const getCash = (cash) => {
    dispatch({type: 'GET_CASH', payload: cash})
  }

  const addCustomer = (name) => {
    const customer = {
      name,
      id: Date.now(),
    }
    dispatch(addCustomerAction(customer))
  }

  const removeCustomer = (customer) => {
     dispatch(removeCustomerAction(customer.id))
  }

  return (
    <div className='App'>
        <div>
          {cash}
          <button onClick={() => addCash(Number(prompt()))}>add</button>
          <button onClick={() => getCash(Number(prompt()))}>remove</button>
          <button onClick={() => addCustomer(prompt())}>add client</button>

        </div>
        {console.log(customers)}
        {customers.length? 
         <div>
           {customers.map(el => <div onClick={() => removeCustomer(el)}>
            {el.name}
           </div> )}
         </div>
         :
         <div>
           no clients!
         </div>}
    </div>
  )
}

export default App;

//store/index.js

import { combineReducers, createStore} from "redux";
import { cashReducer } from "./casReducer";
import { customerReducer } from "./customerReducer";
import { composeWithDevTools } from "redux-devtools-extension";

const rootReducer = combineReducers({
    cash: cashReducer,
    customers: customerReducer
})

 const store = createStore(rootReducer, composeWithDevTools())

//cashreducer


const defaultState = {
    cash: 0
}

 const cashReducer = (state = defaultState, action) => {
   switch(action.type) {
     case 'ADD_CASH': 
       return {...state, cash: state.cash + action.payload}
     case 'GET_CASH':
       return {...state, cash: state.cash - action.payload}   
     ;
     default:
        return state
   }
}

//customerREducer


const defaultState = {
    customers: []
}

const ADD_CUSTOMER = 'ADD_CUSTOMER';
const REMOVE_CUSTOMER = 'REMOVE_CUSTOMER'

const customerReducer = (state = defaultState, action) => {
   switch(action.type) {
     case ADD_CUSTOMER: 
       return {...state, customers: [...state.customers, action.payload]}
     case REMOVE_CUSTOMER:
       return {...state, customers: state.customers.filter(el => el.id !== action.payload)}   
     ;
     default:
        return state
   }
}

 const addCustomerAction = (payload) => ({type: ADD_CUSTOMER, payload});
const removeCustomerAction = (payload) => ({type: REMOVE_CUSTOMER, payload});

//thunk
 //customerReducer
case ADD_MANY_CUSTOMER: 
return {...state, customers: [...state.customers, ...action.payload]}
export const addManyCustomerAction = (payload) => ({
  type: ADD_MANY_CUSTOMER,
  payload
})

 //store/index.js
export const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))

 //asyncAction/customer
 import { addManyCustomerAction } from "../store/customerReducer";

 export const fetchCustomers = () => {
   return (dispatch) => {
     fetch("https://jsonplaceholder.typicode.com/users")
       .then((response) => response.json())
       .then((json) => dispatch(addManyCustomerAction(json)));
   };
 };
 
 //app
 <button onClick={() => dispatch(fetchCustomers())}>accept customers</button> -->
